#! /bin/sh
### BEGIN INIT INFO
# Provides:          raspeomix
# Required-Start:    $sshd $syslog
# Required-Stop:     $sshd $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Raspeomix Museum Player
# Description:       Sensors aware multimedia player
### END INIT INFO

# Author: Michel Blanc <mblanc@erasme.org>
#
# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Raspeomix Museum Player"
NAME=raspeomix
BASEDIR="/home/pi/raspeomix/"
PIDFILE=$BASEDIR/tmp/pids/thin.pid
SCRIPTNAME=/etc/init.d/$NAME

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

VERBOSE="yes"
#
# Checks PID
#
# We don't really trust PID file since it might be leftover
# from hard power off
pid_check()
{
  PID=`ps auwx | grep [t]hin | awk '{ print $2 }'`
  [ -z "$PID" ] && rm $PIDFILE 2> /dev/null
  echo $PID
}

#
# Function that starts the daemon/service
#
do_start()
{
  PID=$( pid_check )
  [ ! -z "$PID" ] && return 1
  rm $BASEDIR/log/*.log 2> /dev/null
  su pi -c "cd $BASEDIR; RASP_PORT=$RASP_PORT bundle exec rake server:start" || return 2
#  for i in $RASP_CLIENTS; do
#    echo -n "...$i"
#    #su pi -c "cd $BASEDIR && RASP_PORT=$RASP_PORT bundle exec rake client:start[$i]"
#    cd $BASEDIR && RASP_PORT=$RASP_PORT bundle exec rake client:start[$i]
#  done
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
  PID=$( pid_check )
  [ -z "$PID" ] && return $1
  su pi -c "cd $BASEDIR; bundle exec rake server:stop" || return 2
  echo -n "...clients"
  pkill -TERM -f 'ruby -I./lib clients/'
}

#
# Function that sends a SIGHUP to the daemon/service
#

case "$1" in
  status)
    PID=$( pid_check )
    if [ ! -z "$PID" ]; then
      CLIENTS=`pgrep -f "ruby -I./lib clients/" | tr '\n' ' '`
      log_success_msg "$name is running on port $RASP_PORT and PIDs $PID [ $CLIENTS] "
    else
      log_failure_msg "$name is not running"
    fi
    ;;
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac


